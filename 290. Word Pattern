/**************************************************************************************
 * Given a pattern and a string str, find if str follows the same pattern.
 * 
 * Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in str.
 * 
 * Examples:
 * pattern = "abba", str = "dog cat cat dog" should return true.
 * pattern = "abba", str = "dog cat cat fish" should return false.
 * pattern = "aaaa", str = "dog cat cat dog" should return false.
 * pattern = "abba", str = "dog dog dog dog" should return false.
 * Notes:
 * You may assume pattern contains only lowercase letters, and str contains lowercase letters separated by a single space.
 **************************************************************************************/
 
 class Solution {
    public boolean wordPattern(String pattern, String str) {
        Map<Character, Integer> map1 = new HashMap<>();
        Map<String, Integer> map2 = new HashMap<>();
        int index1 = 0;
        for (int i = 0;i < pattern.length();i++) {
            if (map1.containsKey(pattern.charAt(i))) continue;
            map1.put(pattern.charAt(i), index1++);
        }
        String[] strs = str.split(" ");
        if (strs.length != pattern.length()) return false;
        int index2 = 0;
        for (int i = 0;i < strs.length;i++) {
            if (map2.containsKey(strs[i])) continue;
            map2.put(strs[i], index2++);
        }
        if (index1 != index2) return false;
        for (int i = 0; i < strs.length; i++) {
            if (map1.get(pattern.charAt(i)) != map2.get(strs[i])) return false;
        }
        return true;
    }
}
