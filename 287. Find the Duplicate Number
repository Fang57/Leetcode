/**************************************************************************************
* Given an array nums containing n + 1 integers where each integer is between 1 and n (inclusive), 
* prove that at least one duplicate number must exist. 
* Assume that there is only one duplicate number, find the duplicate one.
* 
* Note:
* You must not modify the array (assume the array is read only).
* You must use only constant, O(1) extra space.
* Your runtime complexity should be less than O(n2).
* There is only one duplicate number in the array, but it could be repeated more than once.*
* 
* Credits:
* Special thanks to @jianchao.li.fighter for adding this problem and creating all test cases.
*
* Subscribe to see which companies asked this question.
**************************************************************************************/

/**
 * 暴力方法O(n方)
 */
  public class Solution {
      public int findDuplicate(int[] nums) {
          for (int i = 0 ;i<nums.length;i++)
          {
              for (int j = i+1;j<nums.length;j++)
              {
                  if (nums[i] == nums[j])
                  {
                      return nums[i];
                  }
              }
          }
          return 0;
      }
  }
  
  /**
   * 看到一个很聪明的办法，O(n).
   *
   * 解析见博客：http://blog.csdn.net/u012959498/article/details/60144921
   * 代码如下
   *
   */
   public class Solution {
    public int findDuplicate(int[] nums) {
        int slow = 0;
        int fast = 0;
        int finder = 0;

        while (true){
            slow = nums[slow];
            fast = nums[nums[fast]];
            if (slow == fast)
                break;
        }
        while (true)
        {
            finder = nums[finder];
            slow = nums[slow];
            if (slow == finder)
                return slow;
        }
    }
}

/**
 * 二分法O(nlogn)
 */
public class Solution {
    public int findDuplicate(int[] nums) {
        /**
         * 二分法O(nlogn)
         */
        int left = 1;
        int right = nums.length-1;
        int mid = 0;

        while (left < right)
        {
            mid = (left + right)/2;

            int count = 0;
            for (int i=0;i<nums.length;i++)
            {
                if (nums[i] <= mid)
                    count++;
            }
            if(count > mid)
                right = mid;
            else
                left = mid+1;
        }
        return left;
    }
}
