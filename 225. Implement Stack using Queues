/**************************************************************************************
 * Implement the following operations of a stack using queues.
 *
 * push(x) -- Push element x onto stack.
 * pop() -- Removes the element on top of the stack.
 * top() -- Get the top element.
 * empty() -- Return whether the stack is empty.
 * Notes:
 * You must use only standard operations of a queue -- which means only push to back, peek/pop from front, size, 
 * and is empty operations are valid.
 * Depending on your language, queue may not be supported natively. 
 * You may simulate a queue by using a list or deque (double-ended queue), 
 * as long as you use only standard operations of a queue.
 * You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).
 * Credits:
 * Special thanks to @jianchao.li.fighter for adding this problem and all test cases.
 * 
 * Subscribe to see which companies asked this question.
 **************************************************************************************/
 
/**
 * 方案一：两个队列
 */
public class MyStack {

    public Queue<Integer> queue1 = new LinkedList<>();
    public Queue<Integer> queue2 = new LinkedList<>();

    /** Push element x onto stack. */
    public void push(int x) {

        if (!queue1.isEmpty())
            queue1.add(x);
        else
            queue2.add(x);
    }

    /** Removes the element on top of the stack and returns that element. */
    public int pop() {
        if (queue1.isEmpty()){
            int size = queue2.size();
            for (int i = 1;i < size;i++)
            {
                queue1.add(queue2.poll());
            }
            return queue2.poll();
        }
        else {
            int size = queue1.size();
            for (int i = 1; i < size;i++){
                queue2.add(queue1.poll());
            }
            return queue1.poll();
        }
    }

    /** Get the top element. */
    public int top() {
        int res = 0;
        if (queue1.isEmpty()){
            int size = queue2.size();
            for (int i = 1;i < size;i++)
            {
                queue1.add(queue2.poll());
            }
            res = queue2.poll();
            queue1.add(res);
        }
        else {
            int size = queue1.size();
            for (int i = 1; i < size;i++){
                queue2.add(queue1.poll());
            }
            res = queue1.poll();
            queue2.add(res);
        }
        return res;
    }

    /** Returns whether the stack is empty. */
    public boolean empty() {
    
        return queue1.isEmpty() && queue2.isEmpty();
    }
}
/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack obj = new MyStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * boolean param_4 = obj.empty();
 */


/**
 * 方案二：一个队列
 */
public class MyStack {
 
    //one Queue solution
    private Queue<Integer> q = new LinkedList<Integer>();

    // Push element x onto stack.
    public void push(int x) {
        q.add(x);
        for(int i = 1; i < q.size(); i ++) { //rotate the queue to make the tail be the head
            q.add(q.poll());
        }
    }

    // Removes the element on top of the stack.
    public int pop() {
        return q.poll();
    }

    // Get the top element.
    public int top() {
        return q.peek();        
    }

    // Return whether the stack is empty.
    public boolean empty() {
        return q.isEmpty();
    }
}

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack obj = new MyStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * boolean param_4 = obj.empty();
 */
