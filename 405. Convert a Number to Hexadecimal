/**************************************************************************************
 * Given an integer, write an algorithm to convert it to hexadecimal. For negative integer, two’s complement method is used.
 *
 * Note:
 * 
 * All letters in hexadecimal (a-f) must be in lowercase.
 * The hexadecimal string must not contain extra leading 0s. If the number is zero, it is represented by a single zero character '0'; otherwise, the first character in the hexadecimal string will not be the zero character.
 * The given number is guaranteed to fit within the range of a 32-bit signed integer.
 * You must not use any method provided by the library which converts/formats the number to hex directly.
 * Example 1:
 * 
 * Input:
 * 26
 * 
 * Output:
 * "1a"
 * Example 2:
 * 
 * Input:
 * -1
 *
 * Output:
 * "ffffffff"
 **************************************************************************************/

/ 1.逻辑位移 /
class Solution {
   char[] chars = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
        if (num == 0) return "0";
     public String toHex(int num) {
        
        StringBuilder result = new StringBuilder();
        while (num != 0) {
            result.append(chars[num & 15] + "");
            num = num >>> 4;// 逻辑位移
        }
        return result.reverse().toString();
    }
}

/ 2.Java自带方法/
class Solution {
     public String toHex(int num) {
        return Integer.toHexString(num);
    }
}   

/ 3.仿照Java自带方法实现/
class Solution {
     final static char[] digits = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
     public String toHex(int num) {
        int mag = Integer.SIZE - Integer.numberOfLeadingZeros(num);
        int len = Math.max(((mag + 3) / 4), 1);
        char[] buf = new char[len];
        do {
            buf[ 0 + --len] = digits[num & 15];
            num >>>= 4;
        } while (num != 0 && len > 0);
        return new String(buf);
    }
}
