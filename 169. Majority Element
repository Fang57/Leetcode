/**************************************************************************************
 * Given an array of size n, find the majority element. 
 * The majority element is the element that appears more than ⌊ n/2 ⌋ times.
 * 
 * You may assume that the array is non-empty and the majority element always exist in the array.
 **************************************************************************************/

/* 法一：时间复杂度O(n)+空间复杂度O(n) */
import java.util.Map;
import java.util.HashMap;
public class Solution {
    public int majorityElement(int[] nums) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0;i < nums.length;i++) {
            map.put(nums[i], 0);
        }
        for (int i = 0;i < nums.length;i++) {
            map.put(nums[i], map.get(nums[i]) + 1);
        }
        int majority = nums[0];
        for (int i = 0;i < nums.length;i++) {
            if (map.get(majority) < map.get(nums[i])) {
                majority = nums[i];
            }
        }
        return majority;
    }
}

/* 优化目前最优解 */
/* 法一：时间复杂度O(n)+空间复杂度O(1) */
import java.util.Map;
import java.util.HashMap;
public class Solution {
    public int majorityElement(int[] nums) {
        int majority = nums[0];
        int count = 1;
        for (int i = 1;i < nums.length;i++) {
            if (count == 0) {
                majority = nums[i];
                count = 1;
            }
            else if (nums[i] == majority) count++;
            else count--;
        }
        return majority;
    }
}
