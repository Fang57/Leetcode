/**************************************************************************************
 * Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).
 *
 * For example, this binary tree [1,2,2,3,4,4,3] is symmetric: 
 * 
 *     1
 *    / \
 *   2   2
 *  / \ / \
 * 3  4 4  3
 * But the following [1,2,2,null,3,null,3] is not:
 *     1
 *    / \
 *   2   2
 *    \   \
 *     3   3
 * Note:
 * Bonus points if you could solve it both recursively and iteratively.
 * 
 * Subscribe to see which companies asked this question.
 **************************************************************************************/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
/**
 * 递归方法
 */
public class Solution {
    public boolean isSymmetric(TreeNode root) {
         if (root == null) return true;
        return check(root.left, root.right);
    }
    
     public boolean check(TreeNode left, TreeNode right){
        if(left==null || right==null)
            return left==right;
        if(left.val!=right.val)
            return false;
        return check(left.left, right.right) && check(left.right, right.left);
    }
}

/**
 * 非递归方法
 * 堆——遍历
 */
public class Solution {
    public boolean isSymmetric(TreeNode root) {
        
         if (root == null) return true;
        Stack<TreeNode> stack = new Stack<TreeNode>();
        TreeNode left, right;
        
        if(root.left!=null){//根节点有左子树
            if(root.right==null) return false;
            stack.push(root.left);
            stack.push(root.right);
        }
        else if(root.right!=null)//根节点无左子树时
            return false;
        while(!stack.empty()){//对称节点比对
            if(stack.size()%2!=0)   return false;
            right = stack.pop();
            left = stack.pop();
            
            if(right.val!=left.val) return false;

            if(left.left!=null){
                if(right.right==null)   return false;
                stack.push(left.left);
                stack.push(right.right);
            }
            
            else if(right.right!=null) return false;
            
            if(left.right!=null){
                if(right.left==null)   return false;
                stack.push(left.right);
                stack.push(right.left);
            }
            else if(right.left!=null) return false;
        }
        return true;
    }
    
}
