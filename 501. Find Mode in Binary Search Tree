/**************************************************************************************
 * Given a binary search tree (BST) with duplicates, find all the mode(s) (the most frequently occurred element) 
 * in the given BST.
 * 
 * Assume a BST is defined as follows:
 * 
 * The left subtree of a node contains only nodes with keys less than or equal to the node's key.
 * The right subtree of a node contains only nodes with keys greater than or equal to the node's key.
 * Both the left and right subtrees must also be binary search trees.
 * For example:
 * Given BST [1,null,2,2],
 **************************************************************************************/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int max = 0;
    public int[] findMode(TreeNode root) {
        if (root == null) return new int[0];
        Map<Integer, Integer> map = new HashMap<>();

        InOrder(root, map);
        List<Integer> list = new LinkedList<>();
        for (int key: map.keySet()){
            if(map.get(key) == max)
            {
                list.add(key);
            }
        }
        int[] res = new int[list.size()];
        for(int i = 0; i<res.length; i++) res[i] = list.get(i);
        return res;
    }

    public void InOrder(TreeNode treeNode,  Map<Integer, Integer> map) {
        if (treeNode == null) return;
        InOrder(treeNode.left, map);
        map.put(treeNode.val, map.getOrDefault(treeNode.val, 0) + 1);
        max = Math.max(max, map.get(treeNode.val));

        InOrder(treeNode.right, map);
    }
}
