/**************************************************************************************
 * Given a linked list, return the node where the cycle begins. If there is no cycle, return null.
 *
 * Note: Do not modify the linked list. 
 *
 * Follow up:
 * Can you solve it without using extra space?
 *
 * Subscribe to see which companies asked this question.
 **************************************************************************************/
 
 /**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
 
 /**
 * 原理见 http://blog.csdn.net/u012959498/article/details/60144921
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {
        
        if (head == null||head.next==null || head.next.next==null) return null;
        ListNode slow = head.next;
        ListNode fast = head.next.next;
        ListNode k = head;

        while (slow!=fast)
        {
            if(fast.next==null || fast.next.next==null)
                return null;
            slow = slow.next;
            fast = fast.next.next;
        }
        while (k!=slow)
        {
            k = k.next;
            slow = slow.next;
        }
        return k;
    }
}
