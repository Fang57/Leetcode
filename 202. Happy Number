/**************************************************************************************
 * Write an algorithm to determine if a number is "happy".
 *
 * A happy number is a number defined by the following process: Starting with any positive integer, 
 * replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 
 * (where it will stay), or it loops endlessly in a cycle which does not include 1. 
 * Those numbers for which this process ends in 1 are happy numbers.
 *
 * Example: 19 is a happy number
 * (^:以下式子符号意思是平方)
 * 1^2 + 9^2 = 82
 * 8^2 + 2^2 = 68
 * 6^2 + 8^2 = 100
 * 1^2 + 0^2 + 0^2 = 1
 *
 * Credits:
 * Special thanks to @mithmatt and @ts for adding this problem and creating all test cases.
 *
 * Subscribe to see which companies asked this question.
 **************************************************************************************/
 
 /**
  * 数学规律：非happy数题意算法将产生循环出现的newNum，happy数会回归1
  * @param arg
  */
 public class Solution {
    public boolean isHappy(int n) {
 
        int newNum = 0;
        Set<Integer> set = new HashSet<Integer>();
        if (n == 1) 
            return true;
        
        while (n > 1 && n < 10)
            n = n * n;

        while (true) {
            while (n != 0) {
                newNum = newNum + (n % 10) * (n % 10);//将n拆分个位数平方后相加
                n = n / 10;
            }
            n = newNum;
            newNum = 0;
            if (n == 1)//happy数出口
                return true;
            if (!set.add(n))//非happy数出口
                return false;
        }
    }
}
 
 
 
