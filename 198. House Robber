/**************************************************************************************
 * You are a professional robber planning to rob houses along a street.
 * Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them 
 * is that adjacent houses have security system connected and it will automatically contact the police 
 * if two adjacent houses were broken into on the same night.
 * 
 * Given a list of non-negative integers representing the amount of money of each house, 
 * determine the maximum amount of money you can rob tonight without alerting the police.
 * 
 * Credits:
 * Special thanks to @ifanchu for adding this problem and creating all test cases. 
 * Also thanks to @ts for adding additional test cases.
 * 
 * Subscribe to see which companies asked this question.
 **************************************************************************************/

/**
 * 动态规划问题，先列出递推式：
 * money[i][0] = max(money[i - 1][0], money[i - 1][1])
 * 上述公式表示，若不偷第 i 家房子，当前最大收益就是前一家房子的最大收益。（前一家房子可能被偷了，也可能没有被偷。）
 *
 * money[i][1] = money[i - 1][0] + nums[i]
 * 上述公式表示，要偷第 i 家的房子，必须在不偷第 i-1 家房子的前提下，才能加上偷第 i 家获得的收益。
 */
 public class Solution {
    public int rob(int[] nums) {
        
        int rob = 0; //max monney can get if rob current house
        int notrob = 0; //max money can get if not rob current house
        for(int i=0; i<nums.length; i++) {
            //若抢劫当前，则上家不能抢
            int currob = notrob + nums[i]; 
            //若不抢劫当前，取“抢上家”和“不抢上家”两者的最大值
            notrob = Math.max(notrob, rob); 
            rob = currob;
        }
        return Math.max(rob, notrob);
    }
}
