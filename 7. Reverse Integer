/**************************************************************************************
 * Reverse digits of an integer. 
 *
 * Example1: x = 123, return 321
 * Example2: x = -123, return -321 
 *
 * click to show spoilers. 
 *
 * Have you thought about this?
 * Here are some good questions to ask before coding. 
 * Bonus points for you if you have already thought through this! 
 *
 * If the integer's last digit is 0, what should the output be? ie, cases such as 10, 100. 
 * 
 * Did you notice that the reversed integer might overflow? Assume the input is a 32-bit integer,
 * then the reverse of 1000000003 overflows. How should you handle such cases? 
 * 
 * For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.
 *
 * Note:
 * The input is assumed to be a 32-bit signed integer. Your function should return 0 when the reversed integer overflows. 
 *
 * Subscribe to see which companies asked this question.
 **************************************************************************************/
 
 
/**
 * Java(不使用long类型)
 */
 public class Solution {
    public int reverse(int x) {
      
        int sign = 1;
        if(x < 0)
        {
            sign = -1;
            x = 0 - x;
        }
        Integer m = 0;
        int tail = 0;
        int lastM = 0;
        while (x != 0)
        {
            tail = x%10;
            lastM = m;
            m = m * 10 + tail;
            if ((m - tail)/10 != lastM)
            {
                return 0;
            }
            x /= 10;
        }
        if (sign<0)
            m = 0 - m;
        return m;
    }
}
 
/**
 * Java(使用long类型)
 */
public class Solution {
    public int reverse(int x) {
        long m = 0;
        while(x != 0) {
            m = m*10 + x%10;
            x /= 10;
        }
        if(m< -2147483648 || m>2147483647)
            return 0;

        return (int)m;
    }
}
/**
 * C++(使用long long类型)
 */
class Solution {
public:
    int reverse(int x) {
        
        long long m = 0;
        while(x) {
            m = m*10 + x%10;
            x /= 10;
        }
        if(m< -2147483648 || m>2147483647) return 0;
        else return m;
        
    }
};
