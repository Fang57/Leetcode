题目3 : 可疑的记录
时间限制:10000ms
单点时限:1000ms
内存限制:256MB
描述
小Hi有一棵N个节点的树，编号1-N，其中1号节点是整棵树的根。他把这棵树的N-1条边记录成N-1行，每行2个整数a和b，表示a是b的父节点。  

喜欢恶作剧的小Ho在小Hi的记录里加了一行两个整数，于是小Hi不得设法找出这行可疑的记录。具体来说，如果去掉某一行之后，余下N-1行按小Hi的规则（a是b的父节点）恰好能构成一棵N个节点的树，并且满足编号恰好是1-N且1号节点是根，那么被去掉的一行就被视为可疑的。  

你能帮小Hi找出所有可疑的记录吗？

输入
第一行包含一个整数N，表示树的节点数目。  

以下N行每行两个整数a和b，表示a是b的父节点。  

对于30%的数据，1 <= N <= 1000  

对于100%的数据, 1 <= N <= 100000， 1 <= a, b <= N

输入保证合法。

输出
输出一行包含若干个从小到大的整数，表示可疑的行号。（行号从1开始）

样例输入
3
1 2
1 3
1 3
样例输出
2 3


import java.util.*;

public class record {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        while (in.hasNextInt()) {
            int N = in.nextInt();

            Map<Integer ,Integer> map=new HashMap<>();
            boolean find=false;
            for(int i=0;i<N;++i )
            {
                int x=in.nextInt();
                int y=in.nextInt();

                if(find)
                    continue;
                if(y==1)
                {
                    System.out.println(i+1);
                    find=true;
                }
                else {
                    if (map.containsKey(y)) {
                        System.out.println(map.get(y) + " " + (i + 1));
                        find = true;

                    } else
                        map.put(y, i + 1);
                }

            }


        }
    }
}
