 /**************************************************************************************
 * Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.
 *
 * For example,
 * Given the following matrix:
 * 
 * [
 *   [ 1, 2, 3 ],
 *   [ 4, 5, 6 ],
 *   [ 7, 8, 9 ]
 * ]
 * You should return [1,2,3,6,9,8,7,4,5].
 * 
 * Subscribe to see which companies asked this question.
 **************************************************************************************/


public class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> list = new ArrayList<>();
        if (matrix == null  || matrix.length == 0) return list;
        int rows = matrix.length;
        int columns = matrix[0].length;
        int start = 0;
        while (columns > start * 2 && rows > start * 2)
        {
            list = PrintMatixCircle(matrix, list, columns, rows, start);
            start++;
        }
        return list;
    }
    
   
    public List<Integer> PrintMatixCircle(int[][] matrix, List<Integer> list, int columns, int rows, int start){
        int endcolumn = columns - 1 - start;
        int endrow = rows - 1 - start;
        int i = 0;
        //从左到右打印一行
        for (i = start ;i <= endcolumn;i++)
            list.add(matrix[start][i]);
        if (start < endrow) 
            //从上到下打印一列
            for (i = start + 1; i <= endrow; i++) 
                list.add(matrix[i][endcolumn]);
        if (start < endrow && start < endcolumn) 
            //从右到左打印一行
            for (i = endcolumn - 1; i >= start; i--) 
                list.add(matrix[endrow][i]);
        if (endrow - start >= 2 && endcolumn > start) 
            //从下到上打印一列
            for (i = endrow - 1; i > start; i--) 
                list.add(matrix[i][start]);
        return list;
    }
}
