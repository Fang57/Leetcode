 /**************************************************************************************
 * Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.
 * 
 * push(x) -- Push element x onto stack.
 * pop() -- Removes the element on top of the stack.
 * top() -- Get the top element.
 * getMin() -- Retrieve the minimum element in the stack.
 * Example:
 *  MinStack minStack = new MinStack();
 *  minStack.push(-2);
 *  minStack.push(0);
 *  minStack.push(-3);
 *  minStack.getMin();   --> Returns -3.
 *  minStack.pop();
 *  minStack.top();      --> Returns 0.
 *  minStack.getMin();   --> Returns -2.
 * Subscribe to see which companies asked this question.
 **************************************************************************************/

public class MinStack {

    Stack<Integer> datasStack = new Stack<>();
    Stack<Integer> minStack = new Stack<>();
    
    public void push(int x) {
        datasStack.add(x);
        if (minStack.size() == 0 || x < minStack.peek())
            minStack.add(x);
        else 
            minStack.add(minStack.peek());
    }

    public void pop() {
        datasStack.pop();
        minStack.pop();
    }

    public int top() {
        return datasStack.peek();
    }

    public int getMin() {
        return minStack.peek();
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
