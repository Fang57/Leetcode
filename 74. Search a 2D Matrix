/**************************************************************************************
 * Write an efficient algorithm that searches for a value in an m x n matrix.
 * This matrix has the following properties:
 * 
 * Integers in each row are sorted from left to right.
 * The first integer of each row is greater than the last integer of the previous row.
 * For example,
 * 
 * Consider the following matrix:
 * 
 * [
 *  [1,   3,  5,  7],
 *  [10, 11, 16, 20],
 *  [23, 30, 34, 50]
 * ]
 * Given target = 3, return true.
 * 
 * Subscribe to see which companies asked this question.
 **************************************************************************************/



public class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if ( matrix.length == 0 ) return false;
        int rows = matrix.length;
        int columns = matrix[0].length;
        int row = 0;
        int column = columns - 1;
        boolean found = false;
        if (rows > 0 && columns > 0)
        {
            while (row < rows && column >= 0)
            {

                if (matrix[row][column] == target)
                {
                    found = true;
                    break;
                }
                else if (matrix[row][column] > target)
                    column--;
                else //matrix[row][column] < target
                    row++;
            }
        }
        return found;
    }
}
